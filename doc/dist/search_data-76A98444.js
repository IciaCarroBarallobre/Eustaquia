searchData={"items":[{"type":"module","title":"eustaquia","doc":"The main application module for Eustaquia.\n\nThis module handles the startup and shutdown of the application\nand provides a simple public API to run the main humidity-check loop\nand test servo behaviors.\n\nEustaquia periodically reads soil humidity via an I²C sensor and\nmoves a servo motor to visually indicate the plant's mood:\n\n- 😀 Happy: Soil is moist\n- 😢 Sad: Soil is dry\n\nIt also communicates with other distributed BEAM nodes running Eustaquia,\nbroadcasting a `waterpls` message when the plant is thirsty.","ref":"eustaquia.html"},{"type":"function","title":"eustaquia.loop/0","doc":"Starts the main event loop.\n\nInitializes the servo motor and schedules periodic humidity checks\nevery `?INTERVAL` milliseconds. Based on the readings, the plant face\nis updated to happy or sad.","ref":"eustaquia.html#loop/0"},{"type":"function","title":"eustaquia.start/2","doc":"Starts the Eustaquia application.\n\nThis callback is invoked when the application is started\nand it launches the top-level supervisor.","ref":"eustaquia.html#start/2"},{"type":"function","title":"eustaquia.stop/1","doc":"Stops the Eustaquia application.\n\nCalled when the application is stopped.","ref":"eustaquia.html#stop/1"},{"type":"function","title":"eustaquia.test_moisture/0","doc":"Reads moisture once and returns the sensor value.\n\nInitializes the servo motor and performs a single humidity read.","ref":"eustaquia.html#test_moisture/0"},{"type":"function","title":"eustaquia.test_servo_happy/0","doc":"Moves the servo motor to the \"happy\" position.\n\nUsed for testing servo movement.","ref":"eustaquia.html#test_servo_happy/0"},{"type":"function","title":"eustaquia.test_servo_sad/0","doc":"Moves the servo motor to the \"sad\" position.\n\nUsed for testing servo movement.","ref":"eustaquia.html#test_servo_sad/0"},{"type":"module","title":"eustaquia_sup","doc":"The top-level supervisor for the Eustaquia application.\n\nThis supervisor is responsible for starting and monitoring\nall main child processes of the system. Currently, it has\nno children defined, but serves as the main entry point\nfor future worker or supervisor processes that make up\nthe plant monitoring and servo control logic.\n\nIt uses the `one_for_all` strategy, meaning if one child\nprocess terminates, all other processes under this supervisor\nwill be terminated and then restarted together.","ref":"eustaquia_sup.html"},{"type":"function","title":"eustaquia_sup.init/1","doc":"Supervisor callback for initializing child processes.\n\nThe current implementation defines no child processes yet,\nbut uses a `one_for_all` strategy with 0 restarts in 1 second.","ref":"eustaquia_sup.html#init/1"},{"type":"function","title":"eustaquia_sup.start_link/0","doc":"Starts the Eustaquia supervisor and links it to the calling process.\n\nThis is usually called by the application module at startup.","ref":"eustaquia_sup.html#start_link/0"},{"type":"module","title":"hum_sensor","doc":"Module for reading soil moisture from a capacitive sensor via I2C.\n\nThis module communicates with an Adafruit soil moisture sensor\n(or similar) connected to the GRiSP board. It uses the `grisp_i2c`\nlibrary to send a read command and retrieve a 16-bit moisture value.","ref":"hum_sensor.html"},{"type":"module","title":"Example usage: - hum_sensor","doc":"```erlang\n1> hum_sensor:read_moisture().\nMoisture: 850\n{ok, 850}\n```","ref":"hum_sensor.html#module-example-usage"},{"type":"function","title":"hum_sensor.read_moisture/0","doc":"Reads soil moisture from the I2C sensor.\n\nOpens the I2C bus, sends a command to the sensor, and reads\na 2-byte value representing the soil moisture level.\n\nReturns:\n- {ok, Moisture}: The measured humidity value (0-65535)\n- {error, Reason}: If communication fails.","ref":"hum_sensor.html#read_moisture/0"},{"type":"module","title":"servo_emo","doc":"Servo control module for Eustaquia.\n\n This module abstracts controlling a small servo motor (e.g., SG90) via\n PWM to visually express the plant's mood:\n\n - 😀 Happy: Servo moves to a 180° position\n - 😢 Sad: Servo moves to a 0° position\n\n It uses the `grisp_pwm` driver to start, stop, and adjust PWM signals\n for the pin connected to the servo.\n\n Typical usage:\n ```\n servo_emo:start(gpio1_4),\n servo_emo:set_emo(gpio1_4, happy).\n ```","ref":"servo_emo.html"},{"type":"function","title":"servo_emo.set_emo/2","doc":"Sets the servo’s emotional state or custom duty cycle.\n\t•\thappy: Moves servo to 180° (duty cycle = 0.125)\n\t•\tsad: Moves servo to 0° (duty cycle = 0.025)\n\t•\tAny float: Directly sets the PWM duty cycle for fine control.\n\nHobby servos like SG90 respond to PWM signals at ~50 Hz.\nDuty cycle values 0.025 and 0.125 correspond to the servo’s\nrotational extremes (0° and 180°).","ref":"servo_emo.html#set_emo/2"},{"type":"function","title":"servo_emo.start/1","doc":"Starts the PWM driver on a given pin, configured for standard hobby servos.\n\nInitializes PWM at ~50 Hz for a servo connected to Pin. If the driver or\npin is already open, it will reuse the existing instance.","ref":"servo_emo.html#start/1"},{"type":"function","title":"servo_emo.stop/1","doc":"Stops PWM on the given pin.\n\nCloses the PWM channel for Pin, freeing resources.","ref":"servo_emo.html#stop/1"},{"type":"extras","title":"Changelog","doc":"# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n\n## [1.0.0] - 2025-07-31","ref":"changelog.html"},{"type":"extras","title":"Added - Changelog","doc":"- Initial public release of Eustaquia.\n- Core application modules:\n  - eustaquia: Main application with humidity-check loop and public test API.\n  - hum_sensor: Reads soil moisture via I²C.\n  - servo_emo: Controls servo motor via PWM to express emotions.\n- Testing utilities:\n  - eustaquia:test_moisture/0, eustaquia:test_servo_happy/0, eustaquia:test_servo_sad/0.","ref":"changelog.html#added"},{"type":"extras","title":"Known Issues - Changelog","doc":"- Initial state (out of soil) looks the same as “sad”.\n- Servo position may drift over time due to lack of feedback.","ref":"changelog.html#known-issues"},{"type":"extras","title":"TODO - Changelog","doc":"- Write the how to connect components section\n- Improve error handling for hardware faults.\n- Add unit and integration tests.\n- Implement notification system (SMS, MQTT).\n- Create a multi-plant network for shared BEAM-based communication.","ref":"changelog.html#todo"},{"type":"extras","title":"Overview","doc":"# 🌱 Eustaquia\n\nEustaquia is a playful project that lets a plant “talk” when it’s thirsty.\nUsing a [GRiSP2 board](https://www.grisp.org) running Erlang, it reads soil humidity and moves a face from happy 😀 to sad 😢 with a servo motor — a fun, beginner‑friendly way to explore GRiSP, embedded Erlang, and simple electronics.\n\n![Eustaquia](assets/eustaquia.gif)","ref":"readme.html"},{"type":"extras","title":"🌀 How? - Overview","doc":"```mermaid\nstateDiagram-v2\n    [*] --> OutOfSoil\n\n    OutOfSoil : Sensor out of soil\n    OutOfSoil : Face = Sad (down)\n    OutOfSoil --> Measuring : Inserted in soil / Start reading\n\n    Measuring : Reading humidity via I2C\n    Measuring --> Happy : Humidity >= Threshold\n    Measuring --> Sad : Humidity   Measuring : 5s Timer / Recheck humidity\n\n    Sad : Face = Sad (down)\n    Sad --> Measuring : 5s Timer / Recheck humidity\n```\n\nIn words:\n\n1. When the sensor is not inserted, the face is tilted down (sad).\n2. When placed in the soil, it reads humidity every 5 seconds via I2C.\n3. If humidity is above a threshold, Eustaquia smiles 😀.\n4. If humidity is below the threshold, it stays sad 😢.\n\n> ⚠️ The initial state looks just like the “sad” face. To verify that everything is working, dip the sensor in water and watch it change to happy.","ref":"readme.html#how"},{"type":"extras","title":"🧠 Useful Concepts - Overview","doc":"- **I2C (Inter-Integrated Circuit)**: A protocol that lets components to exchange data using only two lines: SDA, for transmitting data and SCL, for providing the clock signal that synchronizes communication. Supported by GRiSP through its. It is supported by GRiSP via its [I2C library](https://hexdocs.pm/grisp/grisp_i2c.html). Used here to read soil moisture levels.\n\n- **PWM (Pulse Width Modulation)**: A technique that regulates the power delivered to a device by rapidly switching the signal on and off. The duty cycle (percentage of time the signal is on) determines the output power—0% for fully off, 50% for half power, and 100% for fully on. Supported by GRiSP via its [PWM library](https://hexdocs.pm/grisp/grisp_pwm.html), making it ideal for controlling a servomotor to animate a sad face or a smile face.","ref":"readme.html#useful-concepts"},{"type":"extras","title":"🛠️ Components and how to connect them - Overview","doc":"","ref":"readme.html#components-and-how-to-connect-them"},{"type":"extras","title":"Components - Overview","doc":"To bring your plant project to life, you’ll need:\n\n- 🟩 **[GRiSP2 embedded board](https://www.grisp.org/hardware)** – runs Erlang/Elixir directly on RTEMS, no Linux needed.\n- 🔌 **USB cable (micro-USB)** – To power the board and access the console\n- 💾 **microSD card** (optional) – For deploying your application. If your GRiSP board is already linked to [GRiSP.io](https://grisp.io/), you can deploy software updates remotely (OTA) without needing a microSD card or USB cable.\n- 🪴 **Capacitive soil moisture sensor** – I used an [Adafruit Soil Moisture Sensor (I²C)](https://www.adafruit.com/product/4026) model; corrosion-proof and stable readings.\n- ⚙️ **SG90 servo motor** (or similar) – To move Eustaquia’s face\n- 🔌 [PMOD CON3: R/C Servo Connectors](https://digilent.com/shop/pmod-con3-r-c-servo-connectors/) – A small add-on board that lets you easily connect and control up to four servo motors.\n- 🔋 **Power source** for the servo\n- 🧵 **Jumper wires** – For connections.\n- 🎨 **A face for Eustaquia** – Cardboard, 3D print, markers… get creative!","ref":"readme.html#components"},{"type":"extras","title":"How to connect them - Overview","doc":"#### Servo Motor\n\nWe want to connect a PMOD CON3, a battery and a servo:\n\n![Servo](assets/SG90.png)\n![PMOD CON3](assets/PMODCON3.png)\n![Battery](assets/battery_holder.jpg)\n\nTo connect the servo, plug the PMOD R/C Servo module directly into the GRiSP board GPIO and attach the servo’s signal wire to the GPIO1_4 pin.\n\n**How?**\n\n🔋 Power and ground for the servo are provided through the PMOD connector, but since servos often need more current than the GRiSP board can safely supply, you should use a small external battery. The SG90 servo operating Voltage: 4.8V to 6V.\n\n> ℹ️ Recommended: A small 5V battery pack (for example, 4x AA batteries = 6V, or a regulated USB 5V source).\n\nTo do this, connect the battery directly to the PMOD connector:\n\n- Loosen the small screws on the PMOD’s power terminals (the blue block).\n- Insert the battery wires into the terminals:\n  - The negative wire (usually black) goes to the terminal marked “–”.\n  - The positive wire (usually red) goes to the terminal marked “+”.\n- Tighten the screws to secure the wires.\n\nThis setup allows the servo to receive enough power while still being controlled by the GRiSP board through the signal pin.\n\n⚙️ To connect a servo to the PMOD R/C Servo (Pmod CON3), simply match the three wires of the servo to the corresponding pins on the PMOD:\n\n- The signal wire (usually orange, yellow, or white) goes to SIG\n- The power wire (red) goes to VS for voltage supply\n- The ground wire (black or brown) connects to GND.\n\n#### Soil moisture sensor\n\nTo connect the I²C soil moisture sensor, use a PMOD I²C module plugged into the GRiSP board and wire SCL to SCL, SDA to SDA, VCC to 3.3V or 5V (depending on the sensor), and GND to ground. The optional INT and RESET pins can be left unconnected.\n\n**How?**\n\n![Soil Sensor](assets/adafruit_soil.jpg)\n\nLooking at the PMOD R/C Servo (Pmod CON3) with the triangle marker pointing to the left, the pinout from top to bottom is:\n\n- GND - power and logic ground\n- VIN - 3-5V DC (use the same power voltage as you would for I2C logic)\n- I2C SDA - there's a 10K pullup to VIN\n- I2C SCL - there's a 10K pullup to VIN\n\nMore info at [Pinouts AdaFruit Stemma Soil Sensor](https://learn.adafruit.com/adafruit-stemma-soil-sensor-i2c-capacitive-moisture-sensor/pinouts).\n\nDigilent Pmod Interface Specification that is updating the I2C spec to be 6-pin with:\n\n![PMOD I2C GRiSP](assets/i2cPMOD.png)\n\n- I2C SCL - signals on pin 3.\n- I2C SDA - signals on pin 4.\n- GND - Pin 5\n- VIN - PIN 6\n- Optional, interrupt and reset pins on 1 and 2 respectively.\n\nCheck the 1 marker on the board to know where is the pin 1.\n\nMore info at [PMOD I2C Spec](https://digilent.com/blog/new-i2c-standard-for-pmods/?srsltid=AfmBOoptLmLxP8FrLFza-cjVbrfgA9ECXlfR_V6dQ86XCC2ZdKUZdG3h).","ref":"readme.html#how-to-connect-them"},{"type":"extras","title":"⚙️ Build using a SD-Card - Overview","doc":"1. Compile the application locally: ``rebar3 compile``\n2. Flash and deploy the application to a GRiSP device: `rebar3 grisp deploy`\n3. Insert the SD card into the GRiSP board and power it up.\n\nℹ️ For more information on how this process works, check the [GRiSP wiki](https://github.com/grisp/grisp/wiki).","ref":"readme.html#build-using-a-sd-card"},{"type":"extras","title":"📦 Documentation - Overview","doc":"Generate documentation locally:\n\n```sh\nrebar3 ex_doc\nopen doc/index.html\n```","ref":"readme.html#documentation"},{"type":"extras","title":"🧪 Testing - Overview","doc":"You can manually test Eustaquia by connecting to the shell on the GRiSP board ([over a Serial](https://github.com/grisp/grisp/wiki/Connecting-over-Serial), for example) and running the provided test functions:\n\nInside the Erlang shell:\n\n```erl\n1> eustaquia:test_moisture().\n%% → Reads the current soil moisture value once.\n\n2> eustaquia:test_servo_happy().\n%% → Moves the servo to the \"happy\" 😀 position.\n\n3> eustaquia:test_servo_sad().\n%% → Moves the servo to the \"sad\" 😢 position.\n```\n\nThese commands let you verify that the sensor and servo are working correctly before running the full application loop.","ref":"readme.html#testing"},{"type":"extras","title":"🔮 Future Ideas - Overview","doc":"- 📱 **Notifications**: Send a message to your phone when Eustaquia is thirsty.\n- 🌿 **Plant network**:  Imagine a “neighborhood watch” for plants — if one plant is thirsty 😢, nearby plants running on BEAM nodes can exchange messages to react in sympathy, creating a collective sadness that shows exactly where water is needed.","ref":"readme.html#future-ideas"},{"type":"extras","title":"License","doc":"Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nCopyright 2025, IciaC  .\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","ref":"license.html"}],"proglang":"erlang","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.38.2"}}